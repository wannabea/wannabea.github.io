{"title":"C++ 学习笔记(二)","date":"2019-05-23T15:54:59.431Z","link":"post/cpp2","tags":["C++"],"categories":["C++"],"updated":"2019-05-24T10:28:51.213Z","content":"<h3 id=\"decltype-类型制定符\">decltype  类型制定符<a href=\"post/cpp2#decltype-类型制定符\"></a></h3><p><strong>用处:</strong> 当我们不知道某个变量的类型而需要从表达式推断要定义的类型时,可以使用C++11的第二种类型说明符.,它的实际作用就是返回操作数的数据类型.在此过程中,<strong>编译器分析表达式并得到其类型,但实际运算表达式的值</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ci = <span class=\"number\">0</span>,&amp;cj = ci;</span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(ci) x = <span class=\"number\">0</span>; \t<span class=\"comment\">//x 的数据类型是 const int</span></span><br><span class=\"line\"><span class=\"keyword\">decltype</span>(cj) y = x;\t\t<span class=\"comment\">//y 的数据类型是 const int&amp; 必须对其进行初始化,否则编译器会报错</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>decltype与引用</strong></p>\n<p>当decltype得到的数据类型是一个引用值,那么它只能作为赋值语句的左值出现,即必须<strong>初始化</strong>.</p>\n<p><strong>特性</strong>: 与auto相比,当decltype的表达式加双重括号代表其引用值.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\">decltyp((i)) j = i;\t<span class=\"comment\">//j的类型是 int&amp; 必须对其初始化</span></span><br></pre></td></tr></table></figure>\n\n","prev":{"title":"Hdu3836","link":"post/hdu3836"},"next":{"title":"C++ 学习笔记(一)","link":"post/cpp1"},"plink":"http://rainyblog.top/post/cpp2/","copyright":{"author":"Rainy","link":"<a href=\"http://rainyblog.top/post/cpp2/\" title=\"C++ 学习笔记(二)\">http://rainyblog.top/post/cpp2/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}